{"version":3,"file":"KeyStore.js","sourceRoot":"","sources":["../Script/about.ts","../Script/CommonLogic.ts","../Script/KeyStoreInstance.ts","../Script/UtilityLogic.ts","../Script/Business/BaseLogic.ts","../Script/Business/GetLogic.ts","../Script/Business/InitDbLogic.ts","../Script/Business/MainLogic.ts","../Script/Business/RemoveLogic.ts","../Script/Business/SetLogic.ts"],"names":[],"mappings":"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","sourcesContent":["    /*! KeyStore - v1.1. - 30/7/2017\r\n    * https://github.com/ujjwalguptaofficial/KeyStore\r\n    * Copyright (c) 2017 @Ujjwal Gupta; Licensed MIT */","module KeyStore {\r\n\r\n    export interface ISelect {\r\n        From: any,\r\n        Where: any\r\n    }\r\n\r\n    export interface IDelete {\r\n        From: string,\r\n        Where: any\r\n    }\r\n\r\n    export enum ConnectionStatus {\r\n        Connected = \"connected\",\r\n        Closed = \"closed\",\r\n        NotStarted = \"not_connected\"\r\n    }\r\n\r\n    export interface KeyStoreStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n\r\n    export interface ISet {\r\n        Key: string,\r\n        Value; any\r\n    }\r\n\r\n    export var KeyStoreObj,\r\n        Status: KeyStoreStatus = <KeyStoreStatus>{\r\n            ConStatus: ConnectionStatus.NotStarted,\r\n            LastError: \"\"\r\n        },\r\n        TableName = \"LocalStore\",\r\n        openDb = function () {\r\n            KeyStoreObj.createDb(TableName);\r\n        };\r\n}","module KeyStore {\r\n\r\n    /**\r\n     * Initialize KeyStore\r\n     * \r\n     */\r\n    export var init = function () {\r\n        if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n            UtilityLogic.setDbType();\r\n            KeyStoreObj = new Business.MainLogic();\r\n            KeyStoreObj.createDb(TableName);\r\n        }\r\n    };\r\n\r\n    /**\r\n    * return the value by key\r\n    * \r\n    * @param {string} key \r\n    * @param {Function} onSuccess \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var get = function (key: string, onSuccess: Function, onError: Function = null) {\r\n        if (Status.ConStatus == ConnectionStatus.Connected) {\r\n            var Query = <ISelect>{\r\n                From: this.TableName,\r\n                Where: {\r\n                    Key: key\r\n                }\r\n            }\r\n            this.KeyStoreObj.get(Query, onSuccess, onError);\r\n        }\r\n        else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n            var That = this;\r\n            setTimeout(function () {\r\n                That.get(key, onSuccess, onError);\r\n            }, 50);\r\n        }\r\n        else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n            var That = this;\r\n            this.openDb();\r\n            setTimeout(function () {\r\n                That.get(key, onSuccess, onError);\r\n            }, 50);\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n    * insert or update value\r\n    * \r\n    * @param {any} key \r\n    * @param {any} value \r\n    * @param {Function} [onSuccess=null] \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var set = function (key, value, onSuccess: Function = null, onError: Function = null) {\r\n        if (Status.ConStatus == ConnectionStatus.Connected) {\r\n            var Value = <ISet>{\r\n                Key: key,\r\n                Value: value\r\n            }\r\n            KeyStoreObj.set(this.TableName, Value, onSuccess, onError);\r\n        }\r\n        else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n            var That = this;\r\n            setTimeout(function () {\r\n                That.set(key, value, onSuccess, onError);\r\n            }, 50);\r\n        }\r\n        else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n            var That = this;\r\n            this.openDb();\r\n            setTimeout(function () {\r\n                That.set(key, value, onSuccess, onError);\r\n            }, 50);\r\n        }\r\n    };\r\n\r\n    /**\r\n    * delete value\r\n    * \r\n    * @param {string} key \r\n    * @param {Function} [onSuccess=null] \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var remove = function (key: string, onSuccess: Function = null, onError: Function = null) {\r\n        if (Status.ConStatus == ConnectionStatus.Connected) {\r\n            var Query = <IDelete>{\r\n                From: this.TableName,\r\n                Where: {\r\n                    Key: key\r\n                }\r\n            }\r\n            this.KeyStoreObj.remove(Query, onSuccess, onError);\r\n        }\r\n        else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n            var That = this;\r\n            setTimeout(function () {\r\n                That.remove(key, onSuccess, onError);\r\n            }, 50);\r\n        }\r\n        else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n            var That = this;\r\n            this.openDb();\r\n            setTimeout(function () {\r\n                That.remove(key, onSuccess, onError);\r\n            }, 50);\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export interface IError {\r\n        Name: string,\r\n        Value: string\r\n    }\r\n    export class UtilityLogic {\r\n        /**\r\n         * determine and set the DataBase Type\r\n         * \r\n         * \r\n         * @memberOf UtilityLogic\r\n         */\r\n        static setDbType = function () {\r\n            (window as any).indexedDB = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                (window as any).IDBTransaction = (window as any).IDBTransaction || (window as any).webkitIDBTransaction || (window as any).msIDBTransaction;\r\n                (window as any).IDBKeyRange = (window as any).IDBKeyRange || (window as any).webkitIDBKeyRange || (window as any).msIDBKeyRange\r\n            }\r\n            else {\r\n                throw 'Your browser doesnot support IndexedDb';\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class BaseLogic {\r\n            Results = null;\r\n            OnSuccess: Function;\r\n            OnError: Function;\r\n            ErrorOccured: boolean = false;\r\n            ErrorCount = 0;\r\n            Transaction: IDBTransaction;\r\n            ObjectStore: IDBObjectStore;\r\n\r\n            protected onErrorOccured = function (e) {\r\n                ++this.ErrorCount;\r\n                if (this.ErrorCount == 1) {\r\n                    if (this.OnError != null) {\r\n                        this.OnError((e as any).target.error);\r\n                    }\r\n                }\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export class GetLogic extends BaseLogic {\r\n            Query: ISelect;\r\n\r\n            private get = function () {\r\n                var That: GetLogic = this,\r\n                    getData = function (column, value) {\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                That.Results = Cursor.value['Value'];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                for (var column in this.Query.Where) {\r\n                    getData(column, this.Query.Where[column]);\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n            constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnError = onError;\r\n                this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                this.ObjectStore = this.Transaction.objectStore(query.From);\r\n                this.Transaction.oncomplete = function (e) {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(That.Results);\r\n                    }\r\n                }\r\n                this.get();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class InitDbLogic {\r\n            constructor(dbName: string, tableName: string) {\r\n                var That = this,\r\n                    DbRequest = window.indexedDB.open(dbName, 1);\r\n\r\n                DbRequest.onerror = function (event) {\r\n                    console.error((event as any).target.error);\r\n                };\r\n\r\n                DbRequest.onsuccess = function (event) {\r\n                    Status.ConStatus = ConnectionStatus.Connected;\r\n                    DbConnection = DbRequest.result;\r\n                    DbConnection.onclose = function () {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection Closed\";\r\n                    }\r\n\r\n                    DbConnection.onversionchange = function (e) {\r\n                        if (e.newVersion === null) { // An attempt is made to delete the db\r\n                            e.target.close(); // Manually close our connection to the db\r\n                        }\r\n                    };\r\n\r\n                    DbConnection.onerror = function (e) {\r\n                        Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                    }\r\n\r\n                    DbConnection.onabort = function (e) {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection aborted\";\r\n                    }\r\n                };\r\n\r\n                DbRequest.onupgradeneeded = function (event) {\r\n                    var db = (<any>event).target.result,\r\n                        Column = \"Key\";\r\n                    db.createObjectStore(tableName, {\r\n                        keyPath: Column\r\n                    }).createIndex(Column, Column, { unique: true });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export var DbConnection;\r\n        export class MainLogic {\r\n            public set = function (tableName: string, value, onSuccess: Function, onError: Function) {\r\n                var ObjInsert = new SetLogic(tableName, value, onSuccess, onError);\r\n            }\r\n\r\n            public remove = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                var ObjDelete = new RemoveLogic(query, onSuccess, onError);\r\n            }\r\n\r\n            public get = function (query: ISelect, onSuccess: Function, onError: Function) {\r\n                new GetLogic(query, onSuccess, onError);\r\n            }\r\n\r\n            public createDb = function (tableName) {\r\n                var DbName = \"KeyStore\";\r\n                new InitDbLogic(DbName, tableName);\r\n            }\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class RemoveLogic extends BaseLogic {\r\n            Query: IDelete;\r\n            RowAffected: number = 0;\r\n            private remove = function () {\r\n                var That = this,\r\n                    removeData = function (column, value) {\r\n\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        };\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Cursor.delete();\r\n                                ++That.RowAffected;\r\n                                Cursor.continue();\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                for (var Column in this.Query.Where) {\r\n                    if (!That.ErrorOccured) {\r\n                        removeData(Column, That.Query.Where[Column]);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnError = onError;\r\n                this.Transaction = DbConnection.transaction([query.From], \"readwrite\");\r\n                this.ObjectStore = this.Transaction.objectStore(query.From);\r\n\r\n                this.Transaction.oncomplete = function () {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(That.RowAffected);\r\n                    }\r\n                }\r\n                this.Transaction.onerror = function (e) {\r\n                    That.onErrorOccured(e);\r\n                }\r\n\r\n                this.remove();\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class SetLogic extends BaseLogic {\r\n\r\n            private setData = function (value) {\r\n                var That: SetLogic = this,\r\n                    updateIfExistElseInsert = function () {\r\n                        var CursorOpenRequest = That.ObjectStore.index('Key').openCursor(IDBKeyRange.only(value['Key']));\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Cursor.value['Value'] = value['Value'];\r\n                                Cursor.update(Cursor.value);\r\n                            }\r\n                            else {\r\n                                insertData();\r\n                            }\r\n                        }\r\n\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n\r\n                    },\r\n                    insertData = function () {\r\n                        var AddResult = That.ObjectStore.add(value);\r\n                        AddResult.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n                    }\r\n                updateIfExistElseInsert();\r\n            }\r\n\r\n            constructor(tableName: string, value, onSuccess: Function, onError: Function) {\r\n                super();\r\n                try {\r\n                    var That = this;\r\n                    this.OnError = onError;\r\n                    this.Transaction = DbConnection.transaction([tableName], \"readwrite\");\r\n                    this.ObjectStore = this.Transaction.objectStore(tableName);\r\n                    this.Transaction.oncomplete = function (e) {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    };\r\n                    this.setData(value);\r\n                }\r\n                catch (ex) {\r\n                    console.error(ex);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n"]}