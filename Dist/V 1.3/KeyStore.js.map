{"version":3,"file":"KeyStore.js","sourceRoot":"","sources":["../Script/about.ts","../Script/CommonLogic.ts","../Script/Helper.ts","../Script/UtilsLogic.ts","../Script/Business/BaseLogic.ts","../Script/Business/GetLogic.ts","../Script/Business/SetLogic.ts","../Script/Business/RemoveLogic.ts","../Script/Business/InitDbLogic.ts","../Script/Business/MainLogic.ts","../Script/KeyStoreInstance.ts","../Script/index.ts"],"names":[],"mappings":";;;;;;;;;;ACAA,IAAO,QAAQ,CAgDd;AAhDD,WAAO,QAAQ;IAYX,IAAY,gBAIX;IAJD,WAAY,gBAAgB;QACxB,2CAAuB,CAAA;QACvB,qCAAiB,CAAA;QACjB,gDAA4B,CAAA;IAChC,CAAC,EAJW,gBAAgB,GAAhB,yBAAgB,KAAhB,yBAAgB,QAI3B;IA4BU,qBAAY,GAA6B,EAAE,EAClD,kBAAS,GAAG,YAAY,EACxB,wBAAe,GAAG,KAAK,CAAC;AAEhC,CAAC,EAhDM,QAAQ,KAAR,QAAQ,QAgDd;AChDD,IAAO,QAAQ,CAkDd;AAlDD,WAAO,QAAQ;IACA,+BAAsB,GAAG,UAAU,OAA0B;QACpE,SAAA,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,SAAA,YAAY,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,SAAA,WAAW,EAAE,CAAC;QAClB,CAAC;IACL,CAAC,CAAA;IAEU,oBAAW,GAAG;QACrB,EAAE,CAAC,CAAC,CAAC,SAAA,eAAe,IAAI,SAAA,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9C,SAAA,eAAe,GAAG,IAAI,CAAC;YACvB,IAAI,OAAO,GAAsB;gBAC7B,IAAI,EAAE,SAAA,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC1B,KAAK,EAAE,SAAA,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK;aAC/B,CAAA;YACD,SAAA,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC/B,CAAC;IACL,CAAC,CAAA;IAEU,0BAAiB,GAAG,UAAU,OAA0B;QAC/D,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,SAAA,QAAQ,CAAC,IAAI,CAAC,UAAU,OAAO;YAC/B,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;IAC/C,CAAC,CAAA;IAEU,+BAAsB,GAAG,UAAU,OAAyB;QACnE,IAAI,eAAe,GAAsB,SAAA,YAAY,CAAC,KAAK,EAAE,CAAC;QAC9D,SAAA,eAAe,GAAG,KAAK,CAAC;QACxB,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,EAAE,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC1B,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAClD,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACtC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,EAAE,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC5B,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;oBAChC,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBACrD,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,eAAe,CAAC,SAAS,EAAE,CAAC;gBAChC,CAAC;YACL,CAAC;QACL,CAAC;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC,CAAA;AAEL,CAAC,EAlDM,QAAQ,KAAR,QAAQ,QAkDd;AClDD,IAAO,QAAQ,CAuBd;AAvBD,WAAO,QAAQ;IAKX;QAAA;QAiBA,CAAC;QAVU,eAAS,GAAG;YACd,MAAc,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAK,MAAc,CAAC,YAAY,IAAK,MAAc,CAAC,eAAe,IAAK,MAAc,CAAC,WAAW,CAAC;YAC/I,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACX,MAAc,CAAC,cAAc,GAAI,MAAc,CAAC,cAAc,IAAK,MAAc,CAAC,oBAAoB,IAAK,MAAc,CAAC,gBAAgB,CAAC;gBAC3I,MAAc,CAAC,WAAW,GAAI,MAAc,CAAC,WAAW,IAAK,MAAc,CAAC,iBAAiB,IAAK,MAAc,CAAC,aAAa,CAAA;YACnI,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,MAAM,wCAAwC,CAAC;YACnD,CAAC;QACL,CAAC,CAAA;QACL,YAAC;KAAA,AAjBD,IAiBC;IAjBY,cAAK,QAiBjB,CAAA;AACL,CAAC,EAvBM,QAAQ,KAAR,QAAQ,QAuBd;ACvBD,IAAO,QAAQ,CAsBd;AAtBD,WAAO,QAAQ;IACX,IAAc,QAAQ,CAoBrB;IApBD,WAAc,QAAQ;QAClB;YAAA;gBACI,YAAO,GAAG,IAAI,CAAC;gBAGf,iBAAY,GAAY,KAAK,CAAC;gBAC9B,eAAU,GAAG,CAAC,CAAC;gBAIL,mBAAc,GAAG,UAAU,CAAC;oBAClC,EAAE,IAAI,CAAC,UAAU,CAAC;oBAClB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC;wBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;4BACvB,IAAI,CAAC,OAAO,CAAE,CAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC1C,CAAC;oBACL,CAAC;oBACD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,CAAC,CAAA;YACL,CAAC;YAAD,WAAC;QAAD,CAAC,AAlBD,IAkBC;QAlBY,aAAI,OAkBhB,CAAA;IACL,CAAC,EApBa,QAAQ,GAAR,iBAAQ,KAAR,iBAAQ,QAoBrB;AACL,CAAC,EAtBM,QAAQ,KAAR,QAAQ,QAsBd;ACtBD,IAAO,QAAQ,CA8Cd;AA9CD,WAAO,QAAQ;IACX,IAAc,QAAQ,CA4CrB;IA5CD,WAAc,QAAQ;QAClB;YAAyB,uBAAI;YA0BzB,aAAY,KAAc,EAAE,SAAmB,EAAE,OAAiB;gBAAlE,YACI,iBAAO,SAaV;gBArCO,SAAG,GAAG;oBACV,IAAI,IAAI,GAAQ,IAAI,EAChB,OAAO,GAAG,UAAU,MAAM,EAAE,KAAK;wBAC7B,IAAI,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC3F,iBAAiB,CAAC,OAAO,GAAG,UAAU,CAAC;4BACnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;4BACzB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAC3B,CAAC,CAAA;wBACD,iBAAiB,CAAC,SAAS,GAAG,UAAU,CAAC;4BACrC,IAAI,MAAM,GAA6B,CAAE,CAAC,MAAM,CAAC,MAAM,CAAC;4BACxD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gCACT,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;4BACzC,CAAC;wBACL,CAAC,CAAA;oBACL,CAAC,CAAA;oBAEL,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;wBAClC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC1C,KAAK,CAAC;oBACV,CAAC;gBAEL,CAAC,CAAA;gBAIG,IAAI,IAAI,GAAG,KAAI,CAAC;gBAChB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBACvB,KAAI,CAAC,WAAW,GAAG,SAAA,YAAY,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;gBACtE,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC5D,KAAI,CAAC,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;oBACrC,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;wBACpB,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC5B,CAAC;gBACL,CAAC,CAAA;gBACD,KAAI,CAAC,GAAG,EAAE,CAAC;;YAEf,CAAC;YAEL,UAAC;QAAD,CAAC,AA1CD,CAAyB,SAAA,IAAI,GA0C5B;QA1CY,YAAG,MA0Cf,CAAA;IACL,CAAC,EA5Ca,QAAQ,GAAR,iBAAQ,KAAR,iBAAQ,QA4CrB;AACL,CAAC,EA9CM,QAAQ,KAAR,QAAQ,QA8Cd;AC9CD,IAAO,QAAQ,CAwDd;AAxDD,WAAO,QAAQ;IACX,IAAc,QAAQ,CAsDrB;IAtDD,WAAc,QAAQ;QAClB;YAAyB,uBAAI;YAiCzB,aAAY,KAAc,EAAE,SAAmB,EAAE,OAAiB;gBAAlE,YACI,iBAAO,SAgBV;gBAhDO,aAAO,GAAG,UAAU,KAAK;oBAC7B,IAAI,IAAI,GAAQ,IAAI,EAChB,uBAAuB,GAAG;wBACtB,IAAI,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACjG,iBAAiB,CAAC,SAAS,GAAG,UAAU,CAAC;4BACrC,IAAI,MAAM,GAA6B,CAAE,CAAC,MAAM,CAAC,MAAM,CAAC;4BACxD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gCACT,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;gCACvC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;4BAChC,CAAC;4BACD,IAAI,CAAC,CAAC;gCACF,UAAU,EAAE,CAAC;4BACjB,CAAC;wBACL,CAAC,CAAA;wBAED,iBAAiB,CAAC,OAAO,GAAG,UAAU,CAAC;4BACnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;4BACzB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAC3B,CAAC,CAAA;oBAEL,CAAC,EACD,UAAU,GAAG;wBACT,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;wBAC5C,SAAS,CAAC,OAAO,GAAG,UAAU,CAAC;4BAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;4BACzB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAC3B,CAAC,CAAA;oBACL,CAAC,CAAA;oBACL,uBAAuB,EAAE,CAAC;gBAC9B,CAAC,CAAA;gBAIG,IAAI,CAAC;oBACD,IAAI,IAAI,GAAG,KAAI,CAAC;oBAChB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;oBACvB,KAAI,CAAC,WAAW,GAAG,SAAA,YAAY,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,WAAW,CAAC,CAAC;oBAC5E,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;oBACjE,KAAI,CAAC,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;wBACrC,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;4BACpB,SAAS,EAAE,CAAC;wBAChB,CAAC;oBACL,CAAC,CAAC;oBACF,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC5B,CAAC;gBACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACR,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACtB,CAAC;;YACL,CAAC;YAEL,UAAC;QAAD,CAAC,AApDD,CAAyB,SAAA,IAAI,GAoD5B;QApDY,YAAG,MAoDf,CAAA;IACL,CAAC,EAtDa,QAAQ,GAAR,iBAAQ,KAAR,iBAAQ,QAsDrB;AACL,CAAC,EAxDM,QAAQ,KAAR,QAAQ,QAwDd;ACxDD,IAAO,QAAQ,CAwDd;AAxDD,WAAO,QAAQ;IACX,IAAc,QAAQ,CAsDrB;IAtDD,WAAc,QAAQ;QAClB;YAA4B,0BAAI;YAgC5B,gBAAY,KAAc,EAAE,SAAmB,EAAE,OAAiB;gBAAlE,YACI,iBAAO,SAiBV;gBAhDD,iBAAW,GAAW,CAAC,CAAC;gBAChB,YAAM,GAAG;oBACb,IAAI,IAAI,GAAG,IAAI,EACX,UAAU,GAAG,UAAU,MAAM,EAAE,KAAK;wBAEhC,IAAI,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC3F,iBAAiB,CAAC,OAAO,GAAG,UAAU,CAAC;4BACnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;4BACzB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAC3B,CAAC,CAAC;wBACF,iBAAiB,CAAC,SAAS,GAAG,UAAU,CAAC;4BACrC,IAAI,MAAM,GAA6B,CAAE,CAAC,MAAM,CAAC,MAAM,CAAC;4BACxD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gCACT,MAAM,CAAC,MAAM,EAAE,CAAC;gCAChB,EAAE,IAAI,CAAC,WAAW,CAAC;gCACnB,MAAM,CAAC,QAAQ,EAAE,CAAC;4BACtB,CAAC;wBAEL,CAAC,CAAA;oBAEL,CAAC,CAAA;oBAEL,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;wBAClC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;4BACrB,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjD,CAAC;wBACD,KAAK,CAAC;oBACV,CAAC;gBACL,CAAC,CAAA;gBAIG,IAAI,IAAI,GAAG,KAAI,CAAC;gBAChB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBACvB,KAAI,CAAC,WAAW,GAAG,SAAA,YAAY,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC;gBACvE,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAE5D,KAAI,CAAC,WAAW,CAAC,UAAU,GAAG;oBAC1B,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;wBACpB,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAChC,CAAC;gBACL,CAAC,CAAA;gBACD,KAAI,CAAC,WAAW,CAAC,OAAO,GAAG,UAAU,CAAC;oBAClC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAA;gBAED,KAAI,CAAC,MAAM,EAAE,CAAC;;YAClB,CAAC;YAEL,aAAC;QAAD,CAAC,AApDD,CAA4B,SAAA,IAAI,GAoD/B;QApDY,eAAM,SAoDlB,CAAA;IACL,CAAC,EAtDa,QAAQ,GAAR,iBAAQ,KAAR,iBAAQ,QAsDrB;AACL,CAAC,EAxDM,QAAQ,KAAR,QAAQ,QAwDd;ACxDD,IAAO,QAAQ,CAmDd;AAnDD,WAAO,QAAQ;IACX,IAAc,QAAQ,CAiDrB;IAjDD,WAAc,QAAQ;QAClB;YACI,gBAAY,MAAc,EAAE,SAAiB,EAAE,SAAmB,EAAE,OAAiB;gBACjF,IAAI,IAAI,GAAG,IAAI,EACX,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAEjD,SAAS,CAAC,OAAO,GAAG,UAAU,KAAK;oBAC/B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;wBAClB,OAAO,CAAE,KAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACzC,CAAC;gBACL,CAAC,CAAC;gBAEF,SAAS,CAAC,SAAS,GAAG,UAAU,KAAK;oBACjC,SAAA,MAAM,CAAC,SAAS,GAAG,SAAA,gBAAgB,CAAC,SAAS,CAAC;oBAC9C,SAAA,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC;oBAChC,SAAA,YAAY,CAAC,OAAO,GAAG;wBACnB,SAAA,MAAM,CAAC,SAAS,GAAG,SAAA,gBAAgB,CAAC,MAAM,CAAC;wBAC3C,SAAA,MAAM,CAAC,SAAS,GAAG,mBAAmB,CAAC;oBAC3C,CAAC,CAAA;oBAED,SAAA,YAAY,CAAC,eAAe,GAAG,UAAU,CAAC;wBACtC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;4BACxB,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;wBACrB,CAAC;oBACL,CAAC,CAAC;oBAEF,SAAA,YAAY,CAAC,OAAO,GAAG,UAAU,CAAC;wBAC9B,SAAA,MAAM,CAAC,SAAS,GAAG,+BAA+B,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;oBACzE,CAAC,CAAA;oBAED,SAAA,YAAY,CAAC,OAAO,GAAG,UAAU,CAAC;wBAC9B,SAAA,MAAM,CAAC,SAAS,GAAG,SAAA,gBAAgB,CAAC,MAAM,CAAC;wBAC3C,SAAA,MAAM,CAAC,SAAS,GAAG,oBAAoB,CAAC;oBAC5C,CAAC,CAAA;oBAED,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;wBACpB,SAAS,EAAE,CAAC;oBAChB,CAAC;gBACL,CAAC,CAAC;gBAEF,SAAS,CAAC,eAAe,GAAG,UAAU,KAAK;oBACvC,IAAI,EAAE,GAAS,KAAM,CAAC,MAAM,CAAC,MAAM,EAC/B,MAAM,GAAG,KAAK,CAAC;oBACnB,EAAE,CAAC,iBAAiB,CAAC,SAAS,EAAE;wBAC5B,OAAO,EAAE,MAAM;qBAClB,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;gBACrD,CAAC,CAAA;YACL,CAAC;YACL,aAAC;QAAD,CAAC,AA/CD,IA+CC;QA/CY,eAAM,SA+ClB,CAAA;IACL,CAAC,EAjDa,QAAQ,GAAR,iBAAQ,KAAR,iBAAQ,QAiDrB;AACL,CAAC,EAnDM,QAAQ,KAAR,QAAQ,QAmDd;ACnDD,IAAO,QAAQ,CAuFd;AAvFD,WAAO,QAAQ;IACX,IAAc,QAAQ,CAqFrB;IArFD,WAAc,QAAQ;QAEd,eAAM,GAAmC;YACrC,SAAS,EAAE,SAAA,gBAAgB,CAAC,UAAU;YACtC,SAAS,EAAE,EAAE;SAChB,CAAC;QACN;YAEI,cAAY,SAAgB;gBAAhB,0BAAA,EAAA,gBAAgB;gBAIrB,mCAA8B,GAAG,UAAU,OAA0B;oBACxE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,WAAW,IAAI,OAAO,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;wBAC3D,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBAC/B,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,EAAE,CAAC,CAAC,SAAA,MAAM,CAAC,SAAS,IAAI,SAAA,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;4BACjD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;wBAC/B,CAAC;wBACD,IAAI,CAAC,EAAE,CAAC,CAAC,SAAA,MAAM,CAAC,SAAS,IAAI,SAAA,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;4BACvD,IAAI,IAAI,GAAG,IAAI,CAAC;4BAChB,UAAU,CAAC;gCACP,IAAI,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;4BACjD,CAAC,EAAE,EAAE,CAAC,CAAC;wBACX,CAAC;wBACD,IAAI,CAAC,EAAE,CAAC,CAAC,SAAA,MAAM,CAAC,SAAS,IAAI,SAAA,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;4BACnD,IAAI,IAAI,GAAG,IAAI,CAAC;4BAChB,IAAI,CAAC,QAAQ,CAAC,SAAA,SAAS,CAAC,CAAC;4BACzB,UAAU,CAAC;gCACP,IAAI,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;4BACjD,CAAC,EAAE,EAAE,CAAC,CAAC;wBACX,CAAC;oBACL,CAAC;gBACL,CAAC,CAAA;gBAEO,iBAAY,GAAG,UAAU,MAAM;oBACnC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;wBACjB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC3B,CAAC;gBACL,CAAC,CAAA;gBAEO,iBAAY,GAAG,UAAU,OAA0B;oBACvD,IAAI,IAAI,GAAG,IAAI,EACX,SAAS,GAAG,UAAU,OAAO;wBACzB,IAAI,CAAC,YAAY,CAAmB;4BAChC,aAAa,EAAE,OAAO;yBACzB,CAAC,CAAC;oBACP,CAAC,EACD,OAAO,GAAG,UAAU,GAAG;wBACnB,IAAI,CAAC,YAAY,CAAmB;4BAChC,YAAY,EAAE,IAAI;4BAClB,YAAY,EAAE,GAAG;yBACpB,CAAC,CAAC;oBACP,CAAC,CAAA;oBAEL,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;wBACnB,KAAK,KAAK;4BACN,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;4BAC5C,KAAK,CAAC;wBACV,KAAK,KAAK;4BAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;4BACpD,KAAK,CAAC;wBACV,KAAK,QAAQ;4BAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;4BAC1D,KAAK,CAAC;wBACV,KAAK,WAAW;4BAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;4BAAC,KAAK,CAAC;oBAC9E,CAAC;gBACL,CAAC,CAAA;gBAEM,QAAG,GAAG,UAAU,KAAc,EAAE,SAAmB,EAAE,OAAiB;oBACzE,IAAI,SAAS,GAAG,IAAI,SAAA,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBACvD,CAAC,CAAA;gBAEM,WAAM,GAAG,UAAU,KAAc,EAAE,SAAmB,EAAE,OAAiB;oBAC5E,IAAI,SAAS,GAAG,IAAI,SAAA,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC1D,CAAC,CAAA;gBAEM,QAAG,GAAG,UAAU,KAAc,EAAE,SAAmB,EAAE,OAAiB;oBACzE,IAAI,SAAA,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBACvC,CAAC,CAAA;gBAEM,aAAQ,GAAG,UAAU,SAAS,EAAE,SAAmB,EAAE,OAAiB;oBACzE,IAAI,MAAM,GAAG,UAAU,CAAC;oBACxB,IAAI,SAAA,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBACtD,CAAC,CAAA;gBA1EG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC/B,CAAC;YA0EL,WAAC;QAAD,CAAC,AA9ED,IA8EC;QA9EY,aAAI,OA8EhB,CAAA;IACL,CAAC,EArFa,QAAQ,GAAR,iBAAQ,KAAR,iBAAQ,QAqFrB;AACL,CAAC,EAvFM,QAAQ,KAAR,QAAQ,QAuFd;ACvFD,IAAO,QAAQ,CAmFd;AAnFD,WAAO,QAAQ;IAKA,aAAI,GAAG;QACd,SAAA,KAAK,CAAC,SAAS,EAAE,CAAC;QAClB,SAAA,sBAAsB,CAAoB;YACtC,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,SAAA,SAAS;SACnB,CAAC,CAAC;IACP,CAAC,CAAC;IASS,YAAG,GAAG,UAAU,GAAW,EAAE,SAAmB,EAAE,OAAwB;QAAxB,wBAAA,EAAA,cAAwB;QACjF,IAAI,KAAK,GAAY;YACjB,IAAI,EAAE,IAAI,CAAC,SAAS;YACpB,KAAK,EAAE;gBACH,GAAG,EAAE,GAAG;aACX;SACJ,CAAC;QACF,SAAA,sBAAsB,CAAoB;YACtC,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,KAAK;YACZ,SAAS,EAAE,SAAS;YACpB,OAAO,EAAE,OAAO;SACnB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC;IAUS,YAAG,GAAG,UAAU,GAAG,EAAE,KAAK,EAAE,SAA0B,EAAE,OAAwB;QAApD,0BAAA,EAAA,gBAA0B;QAAE,wBAAA,EAAA,cAAwB;QACvF,IAAI,KAAK,GAAY;YACjB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,EAAE;gBACD,GAAG,EAAE,GAAG;gBACR,KAAK,EAAE,KAAK;aACf;SACJ,CAAA;QACD,SAAA,sBAAsB,CAAoB;YACtC,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,KAAK;YACZ,SAAS,EAAE,SAAS;YACpB,OAAO,EAAE,OAAO;SACnB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC;IASS,eAAM,GAAG,UAAU,GAAW,EAAE,SAA0B,EAAE,OAAwB;QAApD,0BAAA,EAAA,gBAA0B;QAAE,wBAAA,EAAA,cAAwB;QAC3F,IAAI,KAAK,GAAY;YACjB,IAAI,EAAE,IAAI,CAAC,SAAS;YACpB,KAAK,EAAE;gBACH,GAAG,EAAE,GAAG;aACX;SACJ,CAAA;QACD,SAAA,sBAAsB,CAAoB;YACtC,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,KAAK;YACZ,SAAS,EAAE,SAAS;YACpB,OAAO,EAAE,OAAO;SACnB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC,CAAA;AACL,CAAC,EAnFM,QAAQ,KAAR,QAAQ,QAmFd;AAED,QAAQ,CAAC,IAAI,EAAE,CAAC","sourcesContent":["    /*! KeyStore - v1.1. - 30/7/2017\r\n    * https://github.com/ujjwalguptaofficial/KeyStore\r\n    * Copyright (c) 2017 @Ujjwal Gupta; Licensed MIT */","module KeyStore {\r\n\r\n    export interface ISelect {\r\n        From: any,\r\n        Where: any\r\n    }\r\n\r\n    export interface IDelete {\r\n        From: string,\r\n        Where: any\r\n    }\r\n\r\n    export enum ConnectionStatus {\r\n        Connected = \"connected\",\r\n        Closed = \"closed\",\r\n        NotStarted = \"not_connected\"\r\n    }\r\n\r\n    export interface KeyStoreStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n\r\n    export interface IInsert {\r\n        TableName: string,\r\n        Set: {\r\n            Key: string,\r\n            Value; any\r\n        }\r\n    }\r\n\r\n    export interface IWebWorkerRequest {\r\n        Name: string,\r\n        Query: any,\r\n        OnSuccess: Function,\r\n        OnError: Function\r\n    }\r\n\r\n    export interface IWebWorkerResult {\r\n        ErrorOccured: boolean;\r\n        ErrorDetails: any;\r\n        ReturnedValue: any;\r\n    }\r\n\r\n    export var RequestQueue: Array<IWebWorkerRequest> = [],\r\n        TableName = \"LocalStore\",\r\n        IsCodeExecuting = false;\r\n\r\n}","module KeyStore {\r\n    export var prcoessExecutionOfCode = function (request: IWebWorkerRequest) {\r\n        RequestQueue.push(request);\r\n        if (RequestQueue.length == 1) {\r\n            executeCode();\r\n        }\r\n    }\r\n\r\n    export var executeCode = function () {\r\n        if (!IsCodeExecuting && RequestQueue.length > 0) {\r\n            IsCodeExecuting = true;\r\n            var Request = <IWebWorkerRequest>{\r\n                Name: RequestQueue[0].Name,\r\n                Query: RequestQueue[0].Query\r\n            }\r\n            executeCodeDirect(Request);\r\n        }\r\n    }\r\n\r\n    export var executeCodeDirect = function (request: IWebWorkerRequest) {\r\n        var That = this;\r\n        new Business.Main(function (results) {\r\n            That.processFinishedRequest(results);\r\n        }).checkConnectionAndExecuteLogic(request);\r\n    }\r\n\r\n    export var processFinishedRequest = function (message: IWebWorkerResult) {\r\n        var FinishedRequest: IWebWorkerRequest = RequestQueue.shift();\r\n        IsCodeExecuting = false;\r\n        if (message.ErrorOccured) {\r\n            if (FinishedRequest.OnError) {\r\n                FinishedRequest.OnError(message.ErrorDetails);\r\n            }\r\n            else {\r\n                console.log(message.ErrorDetails);\r\n            }\r\n        }\r\n        else {\r\n            if (FinishedRequest.OnSuccess) {\r\n                if (message.ReturnedValue != null) {\r\n                    FinishedRequest.OnSuccess(message.ReturnedValue);\r\n                }\r\n                else {\r\n                    FinishedRequest.OnSuccess();\r\n                }\r\n            }\r\n        }\r\n        this.executeCode();\r\n    }\r\n\r\n}","module KeyStore {\r\n    export interface IError {\r\n        Name: string,\r\n        Value: string\r\n    }\r\n    export class Utils {\r\n        /**\r\n         * determine and set the DataBase Type\r\n         * \r\n         * \r\n         * @memberOf UtilityLogic\r\n         */\r\n        static setDbType = function () {\r\n            (window as any).indexedDB = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                (window as any).IDBTransaction = (window as any).IDBTransaction || (window as any).webkitIDBTransaction || (window as any).msIDBTransaction;\r\n                (window as any).IDBKeyRange = (window as any).IDBKeyRange || (window as any).webkitIDBKeyRange || (window as any).msIDBKeyRange\r\n            }\r\n            else {\r\n                throw 'Your browser doesnot support IndexedDb';\r\n            }\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class Base {\r\n            Results = null;\r\n            OnSuccess: Function;\r\n            OnError: Function;\r\n            ErrorOccured: boolean = false;\r\n            ErrorCount = 0;\r\n            Transaction: IDBTransaction;\r\n            ObjectStore: IDBObjectStore;\r\n\r\n            protected onErrorOccured = function (e) {\r\n                ++this.ErrorCount;\r\n                if (this.ErrorCount == 1) {\r\n                    if (this.OnError != null) {\r\n                        this.OnError((e as any).target.error);\r\n                    }\r\n                }\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export class Get extends Base {\r\n            Query: ISelect;\r\n\r\n            private get = function () {\r\n                var That: Get = this,\r\n                    getData = function (column, value) {\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                That.Results = Cursor.value['Value'];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                for (var column in this.Query.Where) {\r\n                    getData(column, this.Query.Where[column]);\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n            constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnError = onError;\r\n                this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                this.ObjectStore = this.Transaction.objectStore(query.From);\r\n                this.Transaction.oncomplete = function (e) {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(That.Results);\r\n                    }\r\n                }\r\n                this.get();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class Set extends Base {\r\n\r\n            private setData = function (value) {\r\n                var That: Set = this,\r\n                    updateIfExistElseInsert = function () {\r\n                        var CursorOpenRequest = That.ObjectStore.index('Key').openCursor(IDBKeyRange.only(value['Key']));\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Cursor.value['Value'] = value['Value'];\r\n                                Cursor.update(Cursor.value);\r\n                            }\r\n                            else {\r\n                                insertData();\r\n                            }\r\n                        }\r\n\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n\r\n                    },\r\n                    insertData = function () {\r\n                        var AddResult = That.ObjectStore.add(value);\r\n                        AddResult.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n                    }\r\n                updateIfExistElseInsert();\r\n            }\r\n\r\n            constructor(query: IInsert, onSuccess: Function, onError: Function) {\r\n                super();\r\n                try {\r\n                    var That = this;\r\n                    this.OnError = onError;\r\n                    this.Transaction = DbConnection.transaction([query.TableName], \"readwrite\");\r\n                    this.ObjectStore = this.Transaction.objectStore(query.TableName);\r\n                    this.Transaction.oncomplete = function (e) {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    };\r\n                    this.setData(query.Set);\r\n                }\r\n                catch (ex) {\r\n                    console.error(ex);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class Remove extends Base {\r\n            Query: IDelete;\r\n            RowAffected: number = 0;\r\n            private remove = function () {\r\n                var That = this,\r\n                    removeData = function (column, value) {\r\n\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        };\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Cursor.delete();\r\n                                ++That.RowAffected;\r\n                                Cursor.continue();\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                for (var Column in this.Query.Where) {\r\n                    if (!That.ErrorOccured) {\r\n                        removeData(Column, That.Query.Where[Column]);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnError = onError;\r\n                this.Transaction = DbConnection.transaction([query.From], \"readwrite\");\r\n                this.ObjectStore = this.Transaction.objectStore(query.From);\r\n\r\n                this.Transaction.oncomplete = function () {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(That.RowAffected);\r\n                    }\r\n                }\r\n                this.Transaction.onerror = function (e) {\r\n                    That.onErrorOccured(e);\r\n                }\r\n\r\n                this.remove();\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class InitDb {\r\n            constructor(dbName: string, tableName: string, onSuccess: Function, onError: Function) {\r\n                var That = this,\r\n                    DbRequest = window.indexedDB.open(dbName, 1);\r\n\r\n                DbRequest.onerror = function (event) {\r\n                    if (onError != null) {\r\n                        onError((event as any).target.error);\r\n                    }\r\n                };\r\n\r\n                DbRequest.onsuccess = function (event) {\r\n                    Status.ConStatus = ConnectionStatus.Connected;\r\n                    DbConnection = DbRequest.result;\r\n                    DbConnection.onclose = function () {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection Closed\";\r\n                    }\r\n\r\n                    DbConnection.onversionchange = function (e) {\r\n                        if (e.newVersion === null) { // An attempt is made to delete the db\r\n                            e.target.close(); // Manually close our connection to the db\r\n                        }\r\n                    };\r\n\r\n                    DbConnection.onerror = function (e) {\r\n                        Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                    }\r\n\r\n                    DbConnection.onabort = function (e) {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection aborted\";\r\n                    }\r\n\r\n                    if (onSuccess != null) {\r\n                        onSuccess();\r\n                    }\r\n                };\r\n\r\n                DbRequest.onupgradeneeded = function (event) {\r\n                    var db = (<any>event).target.result,\r\n                        Column = \"Key\";\r\n                    db.createObjectStore(tableName, {\r\n                        keyPath: Column\r\n                    }).createIndex(Column, Column, { unique: true });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export var DbConnection,\r\n            Status: KeyStoreStatus = <KeyStoreStatus>{\r\n                ConStatus: ConnectionStatus.NotStarted,\r\n                LastError: \"\"\r\n            };\r\n        export class Main {\r\n            OnSuccess: Function;\r\n            constructor(onSuccess = null) {\r\n                this.OnSuccess = onSuccess;\r\n            }\r\n\r\n            public checkConnectionAndExecuteLogic = function (request: IWebWorkerRequest) {\r\n                if (request.Name == 'create_db' || request.Name == 'open_db') {\r\n                    this.executeLogic(request);\r\n                }\r\n                else {\r\n                    if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                        this.executeLogic(request);\r\n                    }\r\n                    else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                        var That = this;\r\n                        setTimeout(function () {\r\n                            That.checkConnectionAndExecuteLogic(request);\r\n                        }, 50);\r\n                    }\r\n                    else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n                        var That = this;\r\n                        this.createDb(TableName);\r\n                        setTimeout(function () {\r\n                            That.checkConnectionAndExecuteLogic(request);\r\n                        }, 50);\r\n                    }\r\n                }\r\n            }\r\n\r\n            private returnResult = function (result) {\r\n                if (this.OnSuccess) {\r\n                    this.OnSuccess(result);\r\n                }\r\n            }\r\n\r\n            private executeLogic = function (request: IWebWorkerRequest) {\r\n                var That = this,\r\n                    OnSuccess = function (results) {\r\n                        That.returnResult(<IWebWorkerResult>{\r\n                            ReturnedValue: results\r\n                        });\r\n                    },\r\n                    OnError = function (err) {\r\n                        That.returnResult(<IWebWorkerResult>{\r\n                            ErrorOccured: true,\r\n                            ErrorDetails: err\r\n                        });\r\n                    }\r\n\r\n                switch (request.Name) {\r\n                    case 'get':\r\n                        this.get(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'set': this.set(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'remove': this.remove(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'create_db': this.createDb(request.Query, OnSuccess, OnError); break;\r\n                }\r\n            }\r\n\r\n            public set = function (query: IInsert, onSuccess: Function, onError: Function) {\r\n                var ObjInsert = new Set(query, onSuccess, onError);\r\n            }\r\n\r\n            public remove = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                var ObjDelete = new Remove(query, onSuccess, onError);\r\n            }\r\n\r\n            public get = function (query: ISelect, onSuccess: Function, onError: Function) {\r\n                new Get(query, onSuccess, onError);\r\n            }\r\n\r\n            public createDb = function (tableName, onSuccess: Function, onError: Function) {\r\n                var DbName = \"KeyStore\";\r\n                new InitDb(DbName, tableName, onSuccess, onError);\r\n            }\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    /**\r\n     * Initialize KeyStore\r\n     * \r\n     */\r\n    export var init = function () {\r\n        Utils.setDbType();\r\n        prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n            Name: 'create_db',\r\n            Query: TableName\r\n        });\r\n    };\r\n\r\n    /**\r\n    * return the value by key\r\n    * \r\n    * @param {string} key \r\n    * @param {Function} onSuccess \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var get = function (key: string, onSuccess: Function, onError: Function = null) {\r\n        var Query = <ISelect>{\r\n            From: this.TableName,\r\n            Where: {\r\n                Key: key\r\n            }\r\n        };\r\n        prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n            Name: 'get',\r\n            Query: Query,\r\n            OnSuccess: onSuccess,\r\n            OnError: onError\r\n        });\r\n        return this;\r\n    };\r\n\r\n    /**\r\n    * insert or update value\r\n    * \r\n    * @param {any} key \r\n    * @param {any} value \r\n    * @param {Function} [onSuccess=null] \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var set = function (key, value, onSuccess: Function = null, onError: Function = null) {\r\n        var Query = <IInsert>{\r\n            TableName: this.TableName,\r\n            Set: {\r\n                Key: key,\r\n                Value: value\r\n            }\r\n        }\r\n        prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n            Name: 'set',\r\n            Query: Query,\r\n            OnSuccess: onSuccess,\r\n            OnError: onError\r\n        });\r\n        return this;\r\n    };\r\n\r\n    /**\r\n    * delete value\r\n    * \r\n    * @param {string} key \r\n    * @param {Function} [onSuccess=null] \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var remove = function (key: string, onSuccess: Function = null, onError: Function = null) {\r\n        var Query = <IDelete>{\r\n            From: this.TableName,\r\n            Where: {\r\n                Key: key\r\n            }\r\n        }\r\n        prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n            Name: 'remove',\r\n            Query: Query,\r\n            OnSuccess: onSuccess,\r\n            OnError: onError\r\n        });\r\n        return this;\r\n    }\r\n}\r\n\r\nKeyStore.init();","// Common\r\n\r\n/// <reference path=\"UtilsLogic.ts\" />\r\n/// <reference path=\"CommonLogic.ts\" />\r\n/// <reference path=\"Helper.ts\" />\r\n\r\n//Business\r\n\r\n/// <reference path=\"Business/BaseLogic.ts\" />\r\n/// <reference path=\"Business/GetLogic.ts\" />\r\n/// <reference path=\"Business/SetLogic.ts\" />\r\n/// <reference path=\"Business/RemoveLogic.ts\" />\r\n/// <reference path=\"Business/InitDbLogic.ts\" />\r\n/// <reference path=\"Business/MainLogic.ts\" />\r\n\r\n//Instance\r\n\r\n/// <reference path=\"KeyStoreInstance.ts\" />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}