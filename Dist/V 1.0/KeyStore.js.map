{"version":3,"file":"KeyStore.js","sourceRoot":"","sources":["../Script/about.ts","../Script/CommonLogic.ts","../Script/UtilityLogic.ts","../Script/Model/Column.ts","../Script/Model/Table.ts","../Script/Model/DataBase.ts","../Script/Business/CreateDbLogic.ts","../Script/Business/RemoveLogic.ts","../Script/Business/SetLogic.ts","../Script/Business/OpenDbLogic.ts","../Script/Business/BaseGetLogic.ts","../Script/Business/GetLogic.ts","../Script/Business/MainLogic.ts","../Script/KeyStoreInstance.ts","../Script/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*! KeyStore - v1.0.0 - 28/5/2017\r\n * https://github.com/ujjwalguptaofficial/KeyStore\r\n * Copyright (c) 2017 @Ujjwal Gupta; Licensed GPU2.0 */","module KeyStore {\r\n    export enum ErrorType {\r\n        UndefinedColumn,\r\n        UndefinedValue,\r\n        UndefinedColumnName,\r\n        UndefinedColumnValue,\r\n        NotArray,\r\n        NoValueSupplied,\r\n        ColumnNotExist,\r\n        InvalidOp,\r\n        NullValue,\r\n        BadDataType,\r\n        NextJoinNotExist,\r\n        TableNotExist\r\n    }\r\n\r\n    export interface ISelect {\r\n        From: any,\r\n        Where: any\r\n    }\r\n\r\n\r\n    export interface IDelete {\r\n        From: string,\r\n        Where: any\r\n    }\r\n\r\n    export interface IInsert {\r\n        Into: string,\r\n        Values: Array<IValue>,\r\n        Return: boolean\r\n    }\r\n\r\n    export interface IValue {\r\n        Column: string,\r\n        Value: string\r\n    }\r\n\r\n    export interface ICondition {\r\n        Column: string,\r\n        Value: string,\r\n        Op: string\r\n    }\r\n\r\n    export enum ConnectionStatus {\r\n        Connected = 1,\r\n        Closed = 2,\r\n        NotStarted = 3\r\n    }\r\n\r\n    export interface KeyStoreStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n\r\n    export var Status: KeyStoreStatus = <KeyStoreStatus>{\r\n        ConStatus: ConnectionStatus.NotStarted,\r\n        LastError: \"\"\r\n    };\r\n\r\n    export interface ISet {\r\n        Key: string,\r\n        Value; any\r\n    }\r\n\r\n}","module KeyStore {\r\n    export interface IError {\r\n        Name: string,\r\n        Value: string\r\n    }\r\n    export class UtilityLogic {\r\n        static getError(errorType: ErrorType, logError: boolean = false, errorDetail: any) {\r\n            var Error: IError = {\r\n                Name: ErrorType[errorType],\r\n                Value: ''\r\n            };\r\n            switch (errorType) {\r\n                case ErrorType.NotArray: Error.Value = \"Supplied value is not an array\"; break;\r\n                case ErrorType.UndefinedColumn: Error.Value = \"Column is undefined in Where\"; break;\r\n                case ErrorType.UndefinedValue: Error.Value = \"Value is undefined in Where\"; break;\r\n                case ErrorType.UndefinedColumnName: Error.Value = \"Column name is undefined\"; break;\r\n                case ErrorType.UndefinedColumnValue: Error.Value = \"Column value is undefined\"; break;\r\n                case ErrorType.NoValueSupplied: Error.Value = \"No value supplied\"; break;\r\n                case ErrorType.InvalidOp: Error.Value = \"Invalid Op Value '\" + errorDetail['Op'] + \"'\"; break;\r\n                case ErrorType.ColumnNotExist: Error.Value = \"Column '\" + errorDetail['ColumnName'] + \"' does not exist\";\r\n                    break;\r\n                case ErrorType.NullValue: Error.Value = \"Null value is not allowed for column '\" + errorDetail['ColumnName'] + \"'\";\r\n                    break;\r\n                case ErrorType.BadDataType: Error.Value = \"Supplied value for column '\" + errorDetail['ColumnName'] + \"' does not have valid type\";\r\n                    break;\r\n                case ErrorType.NextJoinNotExist: Error.Value = \"Next join details not supplied\";\r\n                    break;\r\n                case ErrorType.TableNotExist: Error.Value = \"Table '\" + errorDetail['TableName'] + \"' does not exist\";;\r\n                    break;\r\n                default: console.warn('the error type is not defined');\r\n            }\r\n            if (logError) {\r\n                console.warn(\"JsStorage Error :- \" + Error.Value);\r\n            }\r\n            return Error;\r\n        }\r\n\r\n        static convertObjectintoLowerCase(obj: any) {\r\n\r\n            var keys = Object.keys(obj);\r\n            var n = keys.length;\r\n            while (n--) {\r\n                var key = keys[n];\r\n                obj[key.toLowerCase()] = obj[key]\r\n                delete obj[key]\r\n            }\r\n        }\r\n\r\n        /**\r\n         * determine and set the DataBase Type\r\n         * \r\n         * \r\n         * @memberOf MainLogic\r\n         */\r\n        static setDbType = function () {\r\n            (window as any).indexedDB = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                (window as any).IDBTransaction = (window as any).IDBTransaction || (window as any).webkitIDBTransaction || (window as any).msIDBTransaction;\r\n                (window as any).IDBKeyRange = (window as any).IDBKeyRange || (window as any).webkitIDBKeyRange || (window as any).msIDBKeyRange\r\n            }\r\n            else {\r\n                throw 'Your browser doesnot support IndexedDb';\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Model {\r\n        export interface IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            PrimaryKey: boolean;\r\n            Unique: boolean;\r\n            CurrentDate: boolean;\r\n            NotNull: boolean;\r\n            DataType: string;\r\n        }\r\n        export class Column implements IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            PrimaryKey: boolean;\r\n            Unique: boolean;\r\n            CurrentDate: boolean;\r\n            NotNull: boolean;\r\n            DataType: string;\r\n            Searchable: boolean;\r\n\r\n            constructor(key: IColumn, tableName: string) {\r\n                if (key.Name != null) {\r\n                    this.Name = key.Name;\r\n                }\r\n                else {\r\n                    throw \"Column Name is not defined for table:\" + tableName;\r\n                }\r\n                this.AutoIncrement = key.AutoIncrement != null ? key.AutoIncrement : false;\r\n                this.PrimaryKey = key.PrimaryKey != null ? key.PrimaryKey : false;\r\n                this.Unique = key.Unique != null ? key.Unique : false;\r\n                this.CurrentDate = key.CurrentDate != null ? key.CurrentDate : false;\r\n                this.NotNull = key.NotNull != null ? key.NotNull : false;\r\n                this.DataType = key.DataType != null ? key.DataType : '';\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Model {\r\n        export interface ITable {\r\n            Name: string;\r\n            Columns: Array<IColumn>;\r\n            Version: number;\r\n        }\r\n\r\n        export class Table implements ITable {\r\n            Name: string = \"\";\r\n            Columns: Array<Column> = [];\r\n            Version: number;\r\n\r\n            //internal Members\r\n            RequireDelete: boolean = false;\r\n            RequireCreation: boolean = false;\r\n            PrimaryKey: string = \"\";\r\n\r\n            constructor(table: ITable, dbName: string) {\r\n                this.Name = table.Name;\r\n                this.Version = table.Version == undefined ? 1 : table.Version;\r\n                var That = this;\r\n                table.Columns.forEach(function (item) {\r\n                    That.Columns.push(new Column(item, table.Name));\r\n                })\r\n\r\n                this.setRequireDelete(dbName);\r\n                this.setPrimaryKey();\r\n            }\r\n\r\n            //private methods\r\n\r\n            private setPrimaryKey() {\r\n                //this.Key = new Column();//\r\n                var That = this,\r\n                    Length = this.Columns.length;\r\n                this.Columns.forEach(function (item, index) {\r\n                    if (item.PrimaryKey && That.PrimaryKey.length == 0) {\r\n                        That.PrimaryKey = item.Name;\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            private setRequireDelete(dbName: string) {\r\n                this.RequireDelete = true;\r\n            }\r\n\r\n\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Model {\r\n        export interface IDataBase {\r\n            Name: string;\r\n            Tables: Array<ITable>;\r\n        }\r\n        export class DataBase implements IDataBase {\r\n            Name: string;\r\n            Tables: Array<Table> = [];\r\n\r\n            constructor(dataBase: IDataBase) {\r\n                var That = this;\r\n                this.Name = dataBase.Name;\r\n                dataBase.Tables.forEach(function (item) {\r\n                    That.Tables.push(new Table(item, That.Name));\r\n                })\r\n\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export class CreateDbLogic {\r\n            constructor() {\r\n                var That = this,\r\n                    DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion);\r\n\r\n                DbRequest.onerror = function (event) {\r\n                    console.error((event as any).target.error);\r\n                };\r\n\r\n                DbRequest.onsuccess = function (event) {\r\n                    Status.ConStatus = ConnectionStatus.Connected;\r\n                    DbConnection = DbRequest.result;\r\n                    DbConnection.onclose = function () {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection Closed\";\r\n                    }\r\n\r\n                    DbConnection.onversionchange = function (e) {\r\n                        if (e.newVersion === null) { // An attempt is made to delete the db\r\n                            e.target.close(); // Manually close our connection to the db\r\n                        }\r\n                    };\r\n\r\n                    DbConnection.onerror = function (e) {\r\n                        Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                    }\r\n\r\n                    DbConnection.onabort = function (e) {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection aborted\";\r\n                    }\r\n                };\r\n\r\n                DbRequest.onupgradeneeded = function (event) {\r\n                    var db = (<any>event).target.result;\r\n                    ActiveDataBase.Tables.forEach(function (item) {\r\n                        if (item.RequireDelete) {\r\n                            // Delete the old datastore.    \r\n                            if (db.objectStoreNames.contains(item.Name)) {\r\n                                db.deleteObjectStore(item.Name);\r\n                            }\r\n                            createObjectStore(db, item);\r\n                        }\r\n                        else if (item.RequireCreation) {\r\n                            createObjectStore(db, item);\r\n                        }\r\n                    })\r\n\r\n                }\r\n\r\n                var createObjectStore = function (dbConnection, item: Table) {\r\n                    try {\r\n                        if (item.PrimaryKey.length > 0) {\r\n                            var Store = dbConnection.createObjectStore(item.Name, {\r\n                                keyPath: item.PrimaryKey\r\n                            });\r\n                            item.Columns.forEach(function (column: Column) {\r\n                                if (column.PrimaryKey) {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                }\r\n                                else {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                }\r\n                            })\r\n                        }\r\n                        else {\r\n                            var Store = dbConnection.createObjectStore(item.Name, {\r\n                                autoIncrement: true\r\n                            });\r\n                            item.Columns.forEach(function (column: Column) {\r\n                                if (column.Unique) {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                } else {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export class RemoveLogic {\r\n            constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n\r\n                var That = this,\r\n                    Transaction: IDBTransaction = DbConnection.transaction([query.From], \"readwrite\"),\r\n                    ObjectStore: IDBObjectStore = Transaction.objectStore(query.From),\r\n                    ErrorOccured: boolean = false,\r\n                    ErrorCount = 0,\r\n                    RowAffected = 0,\r\n                    onErrorGetRequest = function (e) {\r\n                        ++ErrorCount;\r\n                        if (onError != null && this.ErrorCount == 1) {\r\n                            onError((e as any).target.error);\r\n                        }\r\n                        console.error(e);\r\n                    };\r\n\r\n                Transaction.oncomplete = function () {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(RowAffected);\r\n                    }\r\n                }\r\n\r\n                Transaction.onerror = onErrorGetRequest;\r\n\r\n                var Column,\r\n                    ExecutionNo = 0,\r\n                    ConditionLength = Object.keys(query.Where).length;\r\n                for (Column in query.Where) {\r\n                    if (!ErrorOccured) {\r\n                        var CursorOpenRequest = ObjectStore.index(Column).openCursor(IDBKeyRange.only(query.Where[Column])),\r\n                            ExecutionNo = 0;\r\n\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            ErrorOccured = true;\r\n                            onErrorGetRequest(e);\r\n                        };\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n\r\n                            if (Cursor) {\r\n                                Cursor.delete();\r\n                                ++RowAffected;\r\n                                Cursor.continue();\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class SetLogic {\r\n            Store: IDBObjectStore;\r\n            OnSuccess: Function;\r\n            OnError: Function;\r\n            ErrorOccured: boolean = false;\r\n            ErrorCount = 0;\r\n            Error: IError;\r\n\r\n            public onErrorRequest = function (e, customError = false) {\r\n                ++this.ErrorCount;\r\n                if (this.ErrorCount == 1) {\r\n                    if (this.OnError != null) {\r\n                        if (!customError) {\r\n                            this.OnError((e as any).target.error, this.TotalRowsAffected);\r\n                        }\r\n                        else {\r\n                            this.OnError(e, this.TotalRowsAffected);\r\n                        }\r\n                    }\r\n                }\r\n                console.error(e);\r\n            }\r\n\r\n            constructor(tableName: string, value, isReturn, onSuccess: Function, onError: Function) {\r\n                try {\r\n                    this.OnSuccess = onSuccess;\r\n                    this.OnError = onError;\r\n                    var That = this,\r\n                        Updated = false;\r\n\r\n                    var UpdateIfExist = function () {\r\n                        var Transaction = DbConnection.transaction([tableName], \"readwrite\");\r\n                        That.Store = Transaction.objectStore(tableName);\r\n                        Transaction.oncomplete = function (e) {\r\n                            if (Updated) {\r\n                                if (onSuccess != null) {\r\n                                    onSuccess();\r\n                                }\r\n                            }\r\n                            else {\r\n                                SetData();\r\n                            }\r\n                        };\r\n                        var CursorOpenRequest = That.Store.index('Key').openCursor(IDBKeyRange.only(value['Key']));\r\n\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Updated = true;\r\n                                Cursor.value['Value'] = value['Value'];\r\n                                Cursor.update(Cursor.value);\r\n                            }\r\n                        }\r\n\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorRequest(e);\r\n                        }\r\n                    }\r\n\r\n                    var SetData = function () {\r\n                        var Transaction = DbConnection.transaction([tableName], \"readwrite\");\r\n                        That.Store = Transaction.objectStore(tableName);\r\n                        Transaction.oncomplete = function (e) {\r\n                            if (onSuccess != null) {\r\n                                onSuccess();\r\n                            }\r\n                        };\r\n                        var AddResult = That.Store.add(value);\r\n                        AddResult.onerror = function (e) {\r\n                            That.onErrorRequest(e);\r\n                        }\r\n                    }\r\n\r\n                    UpdateIfExist();\r\n                }\r\n                catch (ex) {\r\n                    console.error(ex);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class OpenDbLogic {\r\n\r\n            constructor(objMain: Instance, onSuccess: Function, onError: Function) {\r\n                if (Status.ConStatus != ConnectionStatus.Connected) {\r\n                    if (ActiveDataBase.Name.length > 0) {\r\n                        var DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion),\r\n                            That = this;\r\n                        DbRequest.onerror = function (event) {\r\n                            if (onError != null) {\r\n                                onError((event as any).target.error);\r\n                            }\r\n                        };\r\n\r\n                        DbRequest.onsuccess = function (event) {\r\n                            Status.ConStatus = ConnectionStatus.Connected;\r\n                            DbConnection = DbRequest.result;\r\n                            DbConnection.onclose = function () {\r\n                                Status.ConStatus = ConnectionStatus.Closed;\r\n                                Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                            }\r\n\r\n                            DbConnection.onversionchange = function (e) {\r\n                                if (e.newVersion === null) { // An attempt is made to delete the db\r\n                                    e.target.close(); // Manually close our connection to the db\r\n                                }\r\n                            };\r\n\r\n                            DbConnection.onerror = function (e) {\r\n                                Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                            }\r\n\r\n                            DbConnection.onabort = function (e) {\r\n                                Status.ConStatus = ConnectionStatus.Closed;\r\n                                Status.LastError = \"Connection Aborted\";\r\n                            }\r\n\r\n                            if (onSuccess != null) {\r\n                                onSuccess(objMain);\r\n                            }\r\n                        };\r\n                    }\r\n                    else {\r\n                        if (onError != null) {\r\n                            onError(<IError>{\r\n                                Name: \"DbNotFound\",\r\n                                Value: \"DataBase name is not found, please first initiate the db using createDb\"\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (onSuccess != null) {\r\n                        onSuccess();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export class BaseGetLogic {\r\n            Results;\r\n            OnSuccess: Function;\r\n            OnError: Function;\r\n            ErrorOccured: boolean = false;\r\n            ErrorCount = 0;\r\n            Transaction: IDBTransaction;\r\n            ObjectStore: IDBObjectStore;\r\n\r\n            public onErrorRequest = function (e) {\r\n                ++this.ErrorCount;\r\n                if (this.ErrorCount == 1) {\r\n                    if (this.OnError != null) {\r\n                        this.OnError((e as any).target.error);\r\n                    }\r\n                }\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export class GetLogic extends BaseGetLogic {\r\n            Query: ISelect;\r\n\r\n            private executeWhereLogic = function () {\r\n                var Column,\r\n                    That: GetLogic = this\r\n\r\n\r\n                var executeInnerWhereLogic = function (column, value) {\r\n                    var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                    CursorOpenRequest.onerror = function (e) {\r\n                        That.ErrorOccured = true;\r\n                        That.onErrorRequest(e);\r\n                    }\r\n\r\n                    CursorOpenRequest.onsuccess = function (e) {\r\n                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                        if (Cursor) {\r\n                            That.Results = Cursor.value['Value'];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (Column in this.Query.Where) {\r\n                    executeInnerWhereLogic(Column, this.Query.Where[Column]);\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n            constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnSuccess = onSuccess;\r\n                this.OnError = onError;\r\n\r\n                this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                this.Transaction.oncomplete = function (e) {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(That.Results);\r\n                    }\r\n                }\r\n\r\n                this.ObjectStore = this.Transaction.objectStore(query.From);\r\n                this.executeWhereLogic();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export var DbConnection,\r\n            DbVersion = 1,\r\n            ActiveDataBase: DataBase;\r\n        export class MainLogic {\r\n            constructor(dataBase: DataBase) {\r\n                ActiveDataBase = dataBase\r\n            }\r\n\r\n            openDb = function (objMain: Instance, onSuccess: Function, onError: Function) {\r\n                var ObjOpenDb = new OpenDbLogic(objMain, onSuccess, onError);\r\n            }\r\n\r\n            public closeDb = function () {\r\n                if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                    DbConnection.close();\r\n                }\r\n            }\r\n\r\n            public set = function (tableName: string, value, isReturn, onSuccess: Function, onError: Function) {\r\n                var ObjInsert = new SetLogic(tableName, value, isReturn, onSuccess, onError);\r\n            }\r\n\r\n            public remove = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                var ObjDelete = new RemoveLogic(query, onSuccess, onError);\r\n            }\r\n\r\n            public get = function (query: ISelect, onSuccess: Function, onError: Function) {\r\n                new GetLogic(query, onSuccess, onError);\r\n            }\r\n\r\n            public createDb = function () {\r\n                new CreateDbLogic();\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","import Model = KeyStore.Model;\r\nimport DataBase = Model.DataBase;\r\nimport Column = Model.Column;\r\nimport Table = Model.Table;\r\n\r\nmodule KeyStore {\r\n    export class Instance {\r\n        KeyStoreObj: Business.MainLogic;\r\n        TableName: string = \"LocalStore\";\r\n        constructor() {\r\n            if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                UtilityLogic.setDbType();\r\n                var Table = <Model.ITable>{\r\n                    Name: this.TableName,\r\n                    Columns: [<Model.IColumn>{\r\n                        Name: \"Key\",\r\n                        PrimaryKey: true\r\n                    }]\r\n                }\r\n\r\n                var keyStore_DataBase = <Model.IDataBase>{\r\n                    Name: \"KeyStores\",\r\n                    Tables: [Table]\r\n                }\r\n\r\n                var Db = new DataBase(keyStore_DataBase);\r\n                this.KeyStoreObj = new Business.MainLogic(Db);\r\n                this.KeyStoreObj.createDb();\r\n            }\r\n        }\r\n\r\n        private openDb(onSuccess: Function = null, onError: Function = null) {\r\n            this.KeyStoreObj.openDb(this, onSuccess, onError);\r\n        }\r\n\r\n        private closeDb(onSuccess: Function, onError: Function) {\r\n            this.KeyStoreObj.closeDb();\r\n        }\r\n\r\n        /**\r\n         * get value based on key\r\n         * \r\n         * @param {string} key \r\n         * @param {Function} onSuccess \r\n         * @param {Function} [onError=null] \r\n         * @memberof Instance\r\n         */\r\n        get(key: string, onSuccess: Function, onError: Function = null) {\r\n            if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                var Query = <ISelect>{\r\n                    From: this.TableName,\r\n                    Where: {\r\n                        Key: key\r\n                    }\r\n                }\r\n                this.KeyStoreObj.get(Query, onSuccess, onError);\r\n            }\r\n            else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.get(key, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.get(key, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * set key,value\r\n         * \r\n         * @param {any} key \r\n         * @param {any} value \r\n         * @param {Function} [onSuccess=null] \r\n         * @param {Function} [onError=null] \r\n         * @memberof Instance\r\n         */\r\n        set(key, value, onSuccess: Function = null, onError: Function = null) {\r\n            if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                var IsReturn = false;\r\n                var Value = <ISet>{\r\n                    Key: key,\r\n                    Value: value\r\n                }\r\n                this.KeyStoreObj.set(this.TableName, Value, IsReturn, onSuccess, onError);\r\n            }\r\n            else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.set(key, value, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.set(key, value, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * remove value based on key\r\n         * \r\n         * @param {string} key \r\n         * @param {Function} [onSuccess=null] \r\n         * @param {Function} [onError=null] \r\n         * @memberof Instance\r\n         */\r\n        remove(key: string, onSuccess: Function = null, onError: Function = null) {\r\n            if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                var Query = <IDelete>{\r\n                    From: this.TableName,\r\n                    Where: {\r\n                        Key: key\r\n                    }\r\n                }\r\n                this.KeyStoreObj.remove(Query, onSuccess, onError);\r\n            }\r\n            else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.remove(key, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.remove(key, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\n// common files\r\n/// <reference path=\"CommonLogic.ts\" />\r\n/// <reference path=\"UtilityLogic.ts\" />\r\n\r\n// KeyStores Files\r\n\r\n//Model\r\n/// <reference path=\"Model/Column.ts\" />\r\n/// <reference path=\"Model/Table.ts\" />\r\n/// <reference path=\"Model/DataBase.ts\" />\r\n//Business\r\n/// <reference path=\"Business/CreateDbLogic.ts\" />\r\n/// <reference path=\"Business/RemoveLogic.ts\" />\r\n/// <reference path=\"Business/SetLogic.ts\" />\r\n/// <reference path=\"Business/OpenDbLogic.ts\" />\r\n/// <reference path=\"Business/BaseGetLogic.ts\" />\r\n/// <reference path=\"Business/GetLogic.ts\" />\r\n/// <reference path=\"Business/MainLogic.ts\" />\r\n\r\n\r\n//Instance files\r\n/// <reference path=\"KeyStoreInstance.ts\" />\r\n\r\n\r\n"]}